from pathlib import Path
from typing import Dict, List, Any
import json
from .base import BasePlugin

class NextJSPlugin(BasePlugin):
    """Next.js plugin for aria"""
    
    @property
    def name(self) -> str:
        return "nextjs"
    
    @property
    def description(self) -> str:
        return "Next.js 14+ project scaffolding and analysis"
    
    @property
    def version(self) -> str:
        return "1.0.0"
    
    def analyze_project(self, project_path: Path) -> Dict[str, Any]:
        """Analyze Next.js project structure"""
        
        analysis = {
            "framework": "nextjs",
            "version": "unknown",
            "app_router_used": False,
            "pages_router_used": False,
            "typescript_used": False,
            "files_analyzed": 0,
            "issues": [],
            "recommendations": []
        }
        
        # Check package.json
        package_json = project_path / "package.json"
        if package_json.exists():
            analysis["files_analyzed"] += 1
            try:
                with open(package_json) as f:
                    data = json.load(f)
                    deps = {**data.get("dependencies", {}), **data.get("devDependencies", {})}
                    if "next" in deps:
                        analysis["version"] = deps["next"]
                    if "typescript" in deps:
                        analysis["typescript_used"] = True
            except:
                analysis["issues"].append("Could not parse package.json")
        
        # Check router structure
        if (project_path / "app").exists():
            analysis["app_router_used"] = True
        if (project_path / "pages").exists():
            analysis["pages_router_used"] = True
        
        # Generate recommendations
        if analysis["app_router_used"] and analysis["pages_router_used"]:
            analysis["issues"].append("Both App Router and Pages Router detected")
            analysis["recommendations"].append("Migrate to App Router for better performance")
        
        if not analysis["typescript_used"]:
            analysis["recommendations"].append("Consider migrating to TypeScript for better developer experience")
        
        return analysis
    
    def scaffold_project(self, project_name: str, target_path: Path) -> Dict[str, Any]:
        """Scaffold new Next.js project"""
        
        project_dir = target_path / project_name
        
        try:
            project_dir.mkdir(parents=True, exist_ok=True)
            
            # Create package.json
            package_json = {
                "name": project_name,
                "version": "0.1.0",
                "private": True,
                "scripts": {
                    "dev": "next dev",
                    "build": "next build",
                    "start": "next start",
                    "lint": "next lint"
                },
                "dependencies": {
                    "next": "14.0.0",
                    "react": "^18.0.0",
                    "react-dom": "^18.0.0"
                },
                "devDependencies": {
                    "typescript": "^5.0.0",
                    "@types/node": "^20.0.0",
                    "@types/react": "^18.0.0",
                    "@types/react-dom": "^18.0.0",
                    "eslint": "^8.0.0",
                    "eslint-config-next": "14.0.0"
                }
            }
            
            with open(project_dir / "package.json", "w") as f:
                json.dump(package_json, f, indent=2)
            
            # Create basic app structure
            app_dir = project_dir / "app"
            app_dir.mkdir(exist_ok=True)
            
            # Create layout.tsx
            layout_content = """export const metadata = {
  title: 'Next.js',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
"""
            with open(app_dir / "layout.tsx", "w") as f:
                f.write(layout_content)
            
            # Create page.tsx
            page_content = """export default function Home() {
  return (
    <main>
      <h1>Welcome to {project_name}</h1>
      <p>Built with Next.js 14</p>
    </main>
  )
}
""".format(project_name=project_name)
            
            with open(app_dir / "page.tsx", "w") as f:
                f.write(page_content)
            
            # Create additional config files
            with open(project_dir / "next.config.js", "w") as f:
                f.write("/** @type {import('next').NextConfig} */\nconst nextConfig = {}\n\nmodule.exports = nextConfig\n")
            
            with open(project_dir / "tsconfig.json", "w") as f:
                f.write("""{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
""")
            
            return {
                "success": True,
                "path": str(project_dir),
                "next_steps": [
                    f"cd {project_name}",
                    "npm install",
                    "npm run dev"
                ]
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    def generate_code(self, task: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """Generate Next.js specific code"""
        # Implementation would generate code based on task requirements
        return {
            "success": True,
            "files_created": [],
            "code": "// Next.js code generation placeholder"
        }