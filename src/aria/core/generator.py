import subprocess
import shutil
from pathlib import Path
from typing import Dict, List, Any, Optional
from ..plugins.base import PluginManager
from ..utils.logger import setup_logger

logger = setup_logger()

class CodeGenerator:
    """Generate code and project structure"""
    
    def __init__(self):
        self.plugin_manager = PluginManager()
    
    def generate_project(self, plan: Dict[str, Any], target_path: Path) -> Dict[str, Any]:
        """Generate complete project from plan"""
        
        target_path = Path(target_path)
        target_path.mkdir(parents=True, exist_ok=True)
        
        results = {
            "success": True,
            "generated_files": [],
            "errors": [],
            "warnings": []
        }
        
        try:
            # Detect framework from tech stack
            framework = self._detect_framework(plan.get("tech_stack", ""))
            
            if framework:
                # Use plugin to scaffold base project
                plugin = self.plugin_manager.get_plugin(framework)
                if plugin:
                    scaffold_result = plugin.scaffold_project(
                        plan["goal"], 
                        target_path
                    )
                    
                    if scaffold_result.get("success"):
                        results["generated_files"].extend(scaffold_result.get("generated_files", []))
                    else:
                        results["errors"].append(f"Scaffolding failed: {scaffold_result.get('error')}")
            
            # Generate module-specific code
            for module in plan.get("top_modules", []):
                module_result = self._generate_module(module, target_path, framework)
                results["generated_files"].extend(module_result.get("generated_files", []))
                results["errors"].extend(module_result.get("errors", []))
                results["warnings"].extend(module_result.get("warnings", []))
            
            # Generate project documentation
            self._generate_documentation(plan, target_path, results)
            
        except Exception as e:
            results["success"] = False
            results["errors"].append(f"Generation failed: {str(e)}")
        
        return results
    
    def _detect_framework(self, tech_stack: str) -> Optional[str]:
        """Detect framework from tech stack"""
        
        tech_stack_lower = tech_stack.lower()
        
        if "next" in tech_stack_lower:
            return "nextjs"
        elif "flask" in tech_stack_lower:
            return "flask"
        elif "spring" in tech_stack_lower:
            return "spring"
        elif "react" in tech_stack_lower:
            return "react"
        elif "vue" in tech_stack_lower:
            return "vue"
        
        return None
    
    def _generate_module(self, module: Dict[str, Any], base_path: Path, framework: Optional[str]) -> Dict[str, Any]:
        """Generate code for a specific module"""
        
        result = {
            "generated_files": [],
            "errors": [],
            "warnings": []
        }
        
        try:
            # Use plugin to generate module code
            if framework:
                plugin = self.plugin_manager.get_plugin(framework)
                if plugin:
                    for task in module.get("tasks", []):
                        task_result = plugin.generate_code(task, {"module": module, "framework": framework})
                        
                        if task_result.get("success"):
                            result["generated_files"].extend(task_result.get("files_created", []))
                        else:
                            result["errors"].append(f"Failed to generate code for task {task['id']}")
            
        except Exception as e:
            result["errors"].append(f"Module generation failed: {str(e)}")
        
        return result
    
    def _generate_documentation(self, plan: Dict[str, Any], base_path: Path, results: Dict[str, Any]):
        """Generate project documentation"""
        
        try:
            # Generate README.md
            readme_content = f"# {plan['goal']}\n\n"
            readme_content += f"Generated by Aria CLI\n\n"
            
            if plan.get('architecture_overview'):
                readme_content += f"## Architecture\n\n{plan['architecture_overview']}\n\n"
            
            readme_content += "## Project Structure\n\n"
            
            for module in plan.get('top_modules', []):
                readme_content += f"### {module['name']}\n"
                readme_content += f"{module.get('description', '')}\n\n"
            
            readme_path = base_path / "README.md"
            with open(readme_path, 'w') as f:
                f.write(readme_content)
            
            results["generated_files"].append(str(readme_path))
            
        except Exception as e:
            results["warnings"].append(f"Documentation generation failed: {str(e)}")