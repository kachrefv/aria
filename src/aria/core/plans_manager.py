import json
import yaml
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime
from ..config import config
from ..utils.logger import setup_logger

logger = setup_logger()

class PlansManager:
    """Manage project plan files"""
    
    def __init__(self, plans_dir: Optional[Path] = None):
        self.plans_dir = Path(plans_dir or config.PLANS_DIR)
        self.plans_dir.mkdir(parents=True, exist_ok=True)
    
    def save_plan(self, plan: Dict[str, Any], file_path: Optional[Path] = None) -> Path:
        """Save plan to file"""
        
        if not file_path:
            # Generate filename from goal
            goal_slug = plan["goal"][:50].lower().replace(" ", "_")
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            file_path = self.plans_dir / f"plan_{goal_slug}_{timestamp}.json"
        
        file_path = Path(file_path)
        file_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Add metadata
        plan_with_meta = plan.copy()
        plan_with_meta["saved_at"] = datetime.now().isoformat()
        plan_with_meta["aria_version"] = "0.1.0"
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(plan_with_meta, f, indent=2, ensure_ascii=False)
        
        logger.info(f"Plan saved to: {file_path}")
        return file_path
    
    def load_plan(self, file_path: Path) -> Dict[str, Any]:
        """Load plan from file"""
        
        file_path = Path(file_path)
        if not file_path.exists():
            raise FileNotFoundError(f"Plan file not found: {file_path}")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            plan = json.load(f)
        
        logger.info(f"Plan loaded from: {file_path}")
        return plan
    
    def list_plans(self) -> list[Dict[str, Any]]:
        """List all saved plans"""
        
        plans = []
        for plan_file in self.plans_dir.glob("*.json"):
            try:
                plan = self.load_plan(plan_file)
                plans.append({
                    "file": plan_file.name,
                    "goal": plan.get("goal", "Unknown"),
                    "saved_at": plan.get("saved_at", ""),
                    "modules": len(plan.get("top_modules", [])),
                    "total_tasks": sum(len(m.get("tasks", [])) for m in plan.get("top_modules", []))
                })
            except Exception as e:
                logger.warning(f"Failed to load plan {plan_file}: {e}")
        
        return sorted(plans, key=lambda x: x.get("saved_at", ""), reverse=True)
    
    def export_plan(self, plan: Dict[str, Any], format: str = "markdown") -> str:
        """Export plan to different formats"""
        
        if format == "markdown":
            return self._export_markdown(plan)
        elif format == "yaml":
            return self._export_yaml(plan)
        else:
            raise ValueError(f"Unsupported export format: {format}")
    
    def _export_markdown(self, plan: Dict[str, Any]) -> str:
        """Export plan as markdown"""
        
        md = f"# {plan['goal']}\n\n"
        md += f"**Generated by Aria on {plan.get('saved_at', 'Unknown')}**\n\n"
        
        if plan.get('architecture_overview'):
            md += f"## Architecture Overview\n\n{plan['architecture_overview']}\n\n"
        
        md += "## Modules\n\n"
        
        for module in plan.get('top_modules', []):
            md += f"### {module['name']}\n\n"
            md += f"{module.get('description', '')}\n\n"
            
            for task in module.get('tasks', []):
                md += f"#### {task['title']}\n\n"
                md += f"- **Priority**: {task.get('priority', 'medium')}\n"
                md += f"- **Estimated Hours**: {task.get('estimated_hours', 'N/A')}\n"
                
                if task.get('dependencies'):
                    md += f"- **Dependencies**: {', '.join(task['dependencies'])}\n"
                
                if task.get('acceptance_criteria'):
                    md += f"- **Acceptance Criteria**:\n"
                    for criteria in task['acceptance_criteria']:
                        md += f"  - {criteria}\n"
                
                md += f"\n{task.get('description', '')}\n\n"
        
        return md
    
    def _export_yaml(self, plan: Dict[str, Any]) -> str:
        """Export plan as YAML"""
        return yaml.dump(plan, default_flow_style=False, allow_unicode=True)